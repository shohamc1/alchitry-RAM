module game_engine (
    input clk,  // clock
    input rst,  // reset
    input btn[5], // 0-A UP, 1-B CENTER, 2-C DOWN, 3-D LEFT, 4-RIGHT 

    output current_out[7],
    output btn_a[3],
    output btn_b[3],
    output btn_c[3],
    output btn_d[3]
    //output target[7]
  ) {
  //const TARGET = 20; 
 
  .clk(clk) {
    ram_handler ram; //we use our ram only for storing current
    .rst(rst) {      
      dff button_a[3](#INIT(0));
      dff button_b[3](#INIT(0));
      dff button_c[3](#INIT(0));
      dff button_d[3](#INIT(0)); 
      dff current[7](#INIT(0));  // for storing the current value in the ram temporarily for addition purpose. 
      dff target[7](#INIT(20));  //where the target value is stored for checking in state.COMPARE
      dff temp[2](#INIT(0));
      fsm state = {BEGIN, IDLE, ADDITION, COMPARE, RESULT};

   }
   
  }

    

  always {

    current_out = 0;
    btn_a = 0;
    btn_b = 0;
    btn_c = 0;
    btn_d = 0;
   
    ram.location = 1bx;
    ram.state = 0;
    ram.in_number = 0;
    
    case(state.q) {
      state.BEGIN:
        /* this state will 
       
           - instantiate current value to 0 (done implicitly in dff declaration)

        */

        button_a.d = 1;
        button_b.d = 3;
        button_c.d = 5;
        button_d.d = 7;
        
        ram.state=1;
        ram.location=0;
        ram.in_number=1;

       
        state.d = state.IDLE;
      state.IDLE:
        
        btn_a=button_a.q;
        btn_b=button_b.q;
        btn_c=button_c.q;
        btn_d=button_d.q;
        
        ram.state=0;
        ram.location=0;
        current_out=ram.out_number;
        current.d = ram.out_number;
        if (btn[1]==1) {
          state.d = state.ADDITION;
          temp.d = 0;
        } else if (btn[2]==1){
          state.d = state.ADDITION;
          temp.d = 1;
        }
               
        if (btn[3]==1) {
          state.d = state.BEGIN; //reset button
          }

      state.ADDITION:
        /*
        This state will add the value assigned to the button to the current value.
        The addition is done automatically using the dff temp. 
           If temp.q == 0, it means that btn[1] is pressed, and thus value in button a is added to the current value.
           If temp.q == 1, it means that btn[3] is pressed, and thus value in button b is added to the current value. 
        */
        
        if (temp.q == 0) {        
          ram.state = 1;
          ram.location = 0;
          ram.in_number = current.q + button_a.q;
        }  
        else if (temp.q == 1) {
          ram.state = 1;
          ram.location = 0;
          ram.in_number = current.q + button_b.q;
        }
        state.d = state.COMPARE;
      state.COMPARE:
        /*
        This state will check if the current value stored in the ram has exceeded the target value.
           If exceeded, 127 will be written to the ram for indication on the io_led in state.RESULT.
           If not exceeded, it will just jump to state.RESULT for assignment to current_out
        */
        if (ram.out_number >= target.q) {
          ram.state = 1;
          ram.location = 0;
          ram.in_number = 127;  //An arbitrary is used here and stored in the ram for indication on the io_led for our checking
         }  
        state.d = state.RESULT;
      state.RESULT:
        btn_a=button_a.q;
        btn_b=button_b.q;
        btn_c=button_c.q;
        btn_d=button_d.q;
        
        ram.state=0;
        ram.location=0;
        current_out=ram.out_number;
        current.d = ram.out_number;
        if (btn[0]==1) {
          state.d = state.IDLE;  //Press btn[0] for next player's turn, and the process will repeat till the losing condition is met, and a different io_led will be shown. 
        }
        if (btn[3]==1) {
          state.d = state.BEGIN; //reset button
         }
    }
  }
}