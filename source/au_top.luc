module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    //new_ge nge;
    .rst(rst) {
      game_engine ge;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4h0;           // select all digits, change to 4hf to disable
    
    io_seg = 8b00000000;
    
    ge.btn[4-:5] = io_button[4-:5];    
    io_led[0][6-:7] = ge.current_out[6-:7]; 
    io_led[1][2-:3] = ge.btn_a[2-:3];
    io_led[1][6-:3] = ge.btn_b[2-:3];
    io_led[2][2-:3] = ge.btn_c[2-:3];
    io_led[2][6-:3] = ge.btn_d[2-:3];
       
    //io_led[0][6-:7] = nge.current_out;
    //nge.btn = io_button;
    
  }
}